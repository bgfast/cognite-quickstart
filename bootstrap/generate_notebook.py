#!/usr/bin/env python3
"""
Generate the complete Tier 2 interactive notebook

Usage:
    python generate_notebook.py

Purpose:
    - Template/source of truth for notebook structure
    - Tracked in Git for version control
    - Run to regenerate notebook after major structural changes
    
Development Workflow:
    - For small edits: Edit toolkit_bootstrap.ipynb directly in Jupyter
    - For large changes: Edit this file, then run to regenerate
    - Both files are committed to Git
    
Note: This is a helper script. Most edits should be done directly in Jupyter
      or via Cursor's edit_notebook tool.
"""
import json

notebook = {
    "cells": [
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "# üöÄ CDF Toolkit Bootstrap - Interactive Deployment\n",
                "\n",
                "**Deploys the breakthrough Functions-based toolkit solution**\n",
                "\n",
                "## What This Deploys\n",
                "\n",
                "1. **Cognite Function**: `test-toolkit-function`\n",
                "   - Installs cognite-toolkit in Functions environment\n",
                "   - Runs real `cdf build`, `cdf deploy` commands\n",
                "   \n",
                "2. **Streamlit App**: `test-toolkit-api`\n",
                "   - UI for calling the function\n",
                "   - Displays breakthrough results\n",
                "   \n",
                "3. **Dataset**: `streamlit-test-toolkit-dataset`\n",
                "   - Required dataset for Streamlit app\n",
                "\n",
                "## How to Use\n",
                "\n",
                "1. Run cells in order (Cell ‚Üí Run All, or run one-by-one)\n",
                "2. Watch for ‚úÖ success messages\n",
                "3. If errors occur, read the message and fix issues\n",
                "4. After completion, go to CDF UI ‚Üí Apps ‚Üí Streamlit\n",
                "\n",
                "**Source**: https://github.com/bgfast/cognite-quickstart\n",
                "\n",
                "---"
            ]
        },
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": ["## Cell 1: Setup & Configuration"]
        },
        {
            "cell_type": "code",
            "execution_count": None,
            "metadata": {},
            "outputs": [],
            "source": [
                "# Configuration - GitHub source URLs\n",
                "GITHUB_RAW_BASE = \"https://raw.githubusercontent.com/bgfast/cognite-quickstart/oct_mods\"\n",
                "FUNCTION_HANDLER_URL = f\"{GITHUB_RAW_BASE}/modules/test-toolkit-api/functions/test-toolkit-function/handler.py\"\n",
                "FUNCTION_REQS_URL = f\"{GITHUB_RAW_BASE}/modules/test-toolkit-api/functions/test-toolkit-function/requirements.txt\"\n",
                "STREAMLIT_MAIN_URL = f\"{GITHUB_RAW_BASE}/modules/test-toolkit-api/streamlit/test-toolkit-api/main.py\"\n",
                "STREAMLIT_REQS_URL = f\"{GITHUB_RAW_BASE}/modules/test-toolkit-api/streamlit/test-toolkit-api/requirements.txt\"\n",
                "\n",
                "# Resource names (customize if needed)\n",
                "DATASET_EXTERNAL_ID = \"streamlit-test-toolkit-dataset\"\n",
                "FUNCTION_EXTERNAL_ID = \"test-toolkit-function\"\n",
                "STREAMLIT_EXTERNAL_ID = \"test-toolkit-api\"\n",
                "\n",
                "print(\"‚úÖ Configuration loaded\")\n",
                "print(f\"   Dataset: {DATASET_EXTERNAL_ID}\")\n",
                "print(f\"   Function: {FUNCTION_EXTERNAL_ID}\")\n",
                "print(f\"   Streamlit: {STREAMLIT_EXTERNAL_ID}\")"
            ]
        },
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": ["## Cell 2: Initialize & Verify"]
        },
        {
            "cell_type": "code",
            "execution_count": None,
            "metadata": {},
            "outputs": [],
            "source": [
                "from cognite.client import CogniteClient\n",
                "import requests\n",
                "from datetime import datetime\n",
                "\n",
                "# Initialize CogniteClient\n",
                "client = CogniteClient()\n",
                "print(\"‚úÖ Connected to CDF\")\n",
                "print(f\"   Project: {client.config.project}\")\n",
                "print(f\"   Cluster: {client.config.base_url}\")\n",
                "print()\n",
                "\n",
                "# Test GitHub connectivity\n",
                "try:\n",
                "    response = requests.get(GITHUB_RAW_BASE, timeout=5)\n",
                "    print(\"‚úÖ GitHub connectivity verified\")\n",
                "    print(f\"   Source: {GITHUB_RAW_BASE}\")\n",
                "except Exception as e:\n",
                "    print(f\"‚ùå Cannot reach GitHub: {e}\")\n",
                "    print(\"üí° Check internet access or try again later\")\n",
                "    raise"
            ]
        },
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": ["## Cell 3: Create Dataset"]
        },
        {
            "cell_type": "code",
            "execution_count": None,
            "metadata": {},
            "outputs": [],
            "source": [
                "print(\"üì¶ Step 1/3: Creating dataset...\")\n",
                "print()\n",
                "\n",
                "# Check if exists\n",
                "existing = client.data_sets.retrieve(external_id=DATASET_EXTERNAL_ID)\n",
                "\n",
                "if existing:\n",
                "    print(f\"‚ÑπÔ∏è  Dataset already exists\")\n",
                "    print(f\"   External ID: {existing.external_id}\")\n",
                "    print(f\"   Name: {existing.name}\")\n",
                "    print(f\"   Created: {existing.created_time}\")\n",
                "else:\n",
                "    # Create new dataset\n",
                "    from cognite.client.data_classes import DataSet\n",
                "    dataset = client.data_sets.create(\n",
                "        DataSet(\n",
                "            external_id=DATASET_EXTERNAL_ID,\n",
                "            name=\"Streamlit Test Toolkit Dataset\",\n",
                "            description=\"Dataset for Streamlit Toolkit API testing - deployed via bootstrap\",\n",
                "            metadata={\n",
                "                \"deployed_at\": datetime.now().isoformat(),\n",
                "                \"bootstrap_version\": \"2.0\",\n",
                "                \"source\": \"github.com/bgfast/cognite-quickstart\"\n",
                "            }\n",
                "        )\n",
                "    )\n",
                "    print(f\"‚úÖ Dataset created\")\n",
                "    print(f\"   External ID: {dataset.external_id}\")\n",
                "    print(f\"   Name: {dataset.name}\")\n",
                "    print(f\"   ID: {dataset.id}\")\n",
                "\n",
                "print()\n",
                "print(\"‚úÖ Dataset ready\")"
            ]
        },
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": ["## Cell 4: Deploy Cognite Function"]
        },
        {
            "cell_type": "code",
            "execution_count": None,
            "metadata": {},
            "outputs": [],
            "source": [
                "print(\"üîß Step 2/3: Deploying Cognite Function...\")\n",
                "print()\n",
                "\n",
                "# Fetch function code from GitHub\n",
                "print(\"üì• Fetching function code from GitHub...\")\n",
                "handler_code = requests.get(FUNCTION_HANDLER_URL).text\n",
                "requirements_txt = requests.get(FUNCTION_REQS_URL).text\n",
                "\n",
                "print(f\"   Handler size: {len(handler_code):,} bytes\")\n",
                "print(f\"   Requirements: {len(requirements_txt.splitlines())} packages\")\n",
                "print()\n",
                "\n",
                "# Deploy function\n",
                "try:\n",
                "    # Check if exists and delete\n",
                "    try:\n",
                "        existing_func = client.functions.retrieve(external_id=FUNCTION_EXTERNAL_ID)\n",
                "        client.functions.delete(external_id=FUNCTION_EXTERNAL_ID)\n",
                "        print(f\"üóëÔ∏è  Removed existing function (id={existing_func.id})\")\n",
                "        print()\n",
                "    except:\n",
                "        pass\n",
                "    \n",
                "    # Create function package\n",
                "    print(\"üì¶ Creating function package...\")\n",
                "    import tempfile\n",
                "    import os\n",
                "    import zipfile\n",
                "    \n",
                "    with tempfile.TemporaryDirectory() as tmpdir:\n",
                "        # Write handler.py\n",
                "        handler_path = os.path.join(tmpdir, \"handler.py\")\n",
                "        with open(handler_path, 'w') as f:\n",
                "            f.write(handler_code)\n",
                "        \n",
                "        # Write requirements.txt\n",
                "        reqs_path = os.path.join(tmpdir, \"requirements.txt\")\n",
                "        with open(reqs_path, 'w') as f:\n",
                "            f.write(requirements_txt)\n",
                "        \n",
                "        # Create zip file\n",
                "        zip_path = os.path.join(tmpdir, \"function.zip\")\n",
                "        with zipfile.ZipFile(zip_path, 'w') as zf:\n",
                "            zf.write(handler_path, \"handler.py\")\n",
                "            zf.write(reqs_path, \"requirements.txt\")\n",
                "        \n",
                "        print(f\"   ‚úÖ Package created: {os.path.getsize(zip_path):,} bytes\")\n",
                "        \n",
                "        # Upload to Files API\n",
                "        print(\"üì§ Uploading to CDF Files...\")\n",
                "        with open(zip_path, 'rb') as f:\n",
                "            file_metadata = client.files.upload(\n",
                "                path=zip_path,\n",
                "                name=f\"function-{FUNCTION_EXTERNAL_ID}.zip\",\n",
                "                external_id=f\"function-{FUNCTION_EXTERNAL_ID}-{datetime.now().strftime('%Y%m%d%H%M%S')}\"\n",
                "            )\n",
                "        \n",
                "        print(f\"   ‚úÖ Uploaded: file_id={file_metadata.id}\")\n",
                "    \n",
                "    print()\n",
                "    print(\"üöÄ Creating function in CDF...\")\n",
                "    \n",
                "    # Create function\n",
                "    function = client.functions.create(\n",
                "        name=\"Test Toolkit Function\",\n",
                "        external_id=FUNCTION_EXTERNAL_ID,\n",
                "        file_id=file_metadata.id,\n",
                "        description=\"Runs cognite-toolkit commands in Functions environment - v2.0\",\n",
                "        owner=\"deployed-via-bootstrap\",\n",
                "        cpu=0.5,\n",
                "        memory=1.5,\n",
                "        runtime=\"py311\",\n",
                "        metadata={\n",
                "            \"version\": \"2.0\",\n",
                "            \"deployed_at\": datetime.now().isoformat(),\n",
                "            \"source\": \"github-bootstrap\"\n",
                "        }\n",
                "    )\n",
                "    \n",
                "    print(f\"‚úÖ Function deployed successfully!\")\n",
                "    print(f\"   External ID: {function.external_id}\")\n",
                "    print(f\"   Function ID: {function.id}\")\n",
                "    print(f\"   Status: {function.status}\")\n",
                "    print(f\"   Runtime: {function.runtime}\")\n",
                "    \n",
                "except Exception as e:\n",
                "    print(f\"‚ùå Function deployment failed: {e}\")\n",
                "    print(\"üí° Check Functions quota and permissions\")\n",
                "    raise\n",
                "\n",
                "print()\n",
                "print(\"‚úÖ Function deployment complete\")"
            ]
        },
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": ["## Cell 5: Test Function Call"]
        },
        {
            "cell_type": "code",
            "execution_count": None,
            "metadata": {},
            "outputs": [],
            "source": [
                "print(\"üß™ Step 3/3: Testing Function...\")\n",
                "print()\n",
                "\n",
                "# Test that function is deployed and callable\n",
                "try:\n",
                "    print(\"üìû Calling function with test data...\")\n",
                "    \n",
                "    call_result = client.functions.call(\n",
                "        external_id=FUNCTION_EXTERNAL_ID,\n",
                "        data={\"test\": \"bootstrap_verification\"}\n",
                "    )\n",
                "    \n",
                "    print(f\"‚úÖ Function called successfully!\")\n",
                "    print(f\"   Call ID: {call_result.id}\")\n",
                "    print(f\"   Status: {call_result.status}\")\n",
                "    print()\n",
                "    print(\"üí° Function is executing...\")\n",
                "    print(\"   The function will:\")\n",
                "    print(\"   - Install cognite-toolkit\")\n",
                "    print(\"   - Fix PATH to include cdf commands\")\n",
                "    print(\"   - Test cdf build, deploy --dry-run, deploy\")\n",
                "    print(\"   - Return test results (~30 seconds)\")\n",
                "    print()\n",
                "    print(\"   Check logs: CDF UI ‚Üí Integrate ‚Üí Functions ‚Üí test-toolkit-function\")\n",
                "    \n",
                "except Exception as e:\n",
                "    print(f\"‚ùå Function call failed: {e}\")\n",
                "    print(\"   Function may need time to warm up (1-2 minutes)\")\n",
                "\n",
                "print()\n",
                "print(\"‚úÖ Function test complete\")\n",
            ]
        },
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": ["## Cell 6: Deploy Streamlit via Function (Future - Commented Out)"]
        },
        {
            "cell_type": "code",
            "execution_count": None,
            "metadata": {},
            "outputs": [],
            "source": [
                "print()\n",
                "\n",
                "# Fetch Streamlit code from GitHub\n",
                "print(\"üì• Fetching Streamlit code from GitHub...\")\n",
                "main_py = requests.get(STREAMLIT_MAIN_URL).text\n",
                "streamlit_reqs = requests.get(STREAMLIT_REQS_URL).text\n",
                "\n",
                "print(f\"   main.py size: {len(main_py):,} bytes\")\n",
                "print(f\"   requirements: {len(streamlit_reqs.splitlines())} packages\")\n",
                "print()\n",
                "\n",
                "try:\n",
                "    # Note: Streamlit API varies by SDK version\n",
                "    # We'll try multiple approaches\n",
                "    \n",
                "    # Clean up existing app\n",
                "    try:\n",
                "        # Try different API methods\n",
                "        try:\n",
                "            existing_app = client.streamlit.retrieve(external_id=STREAMLIT_EXTERNAL_ID)\n",
                "            client.streamlit.delete(external_id=STREAMLIT_EXTERNAL_ID)\n",
                "        except:\n",
                "            existing_app = client.apps.retrieve(external_id=STREAMLIT_EXTERNAL_ID)\n",
                "            client.apps.delete(external_id=STREAMLIT_EXTERNAL_ID)\n",
                "        print(f\"üóëÔ∏è  Removed existing app\")\n",
                "        print()\n",
                "    except:\n",
                "        pass\n",
                "    \n",
                "    print(\"üé® Creating Streamlit app...\")\n",
                "    \n",
                "    # Get dataset ID\n",
                "    dataset = client.data_sets.retrieve(external_id=DATASET_EXTERNAL_ID)\n",
                "    \n",
                "    # Try new API first\n",
                "    try:\n",
                "        streamlit = client.streamlit.upsert(\n",
                "            external_id=STREAMLIT_EXTERNAL_ID,\n",
                "            name=\"Test Toolkit API\",\n",
                "            description=\"v2.0 - BREAKTHROUGH: Toolkit via Functions\",\n",
                "            data_set_id=dataset.id,\n",
                "            source_files={\n",
                "                \"main.py\": main_py,\n",
                "                \"requirements.txt\": streamlit_reqs\n",
                "            }\n",
                "        )\n",
                "    except AttributeError:\n",
                "        # Fall back to older API\n",
                "        streamlit = client.apps.create(\n",
                "            external_id=STREAMLIT_EXTERNAL_ID,\n",
                "            name=\"Test Toolkit API\",\n",
                "            description=\"v2.0 - BREAKTHROUGH: Toolkit via Functions\",\n",
                "            data_set_external_id=DATASET_EXTERNAL_ID,\n",
                "            files={\n",
                "                \"main.py\": main_py,\n",
                "                \"requirements.txt\": streamlit_reqs\n",
                "            }\n",
                "        )\n",
                "    \n",
                "    print(f\"‚úÖ Streamlit app deployed successfully!\")\n",
                "    print(f\"   External ID: {STREAMLIT_EXTERNAL_ID}\")\n",
                "    print(f\"   Name: Test Toolkit API\")\n",
                "    \n",
                "except Exception as e:\n",
                "    print(f\"‚ùå Streamlit deployment failed: {e}\")\n",
                "    print()\n",
                "    print(\"üìã Deploy Streamlit manually (2 minutes):\")\n",
                "    print(\"   1. Go to CDF UI ‚Üí Apps ‚Üí Streamlit ‚Üí 'Create App'\")\n",
                "    print(f\"   2. External ID: {STREAMLIT_EXTERNAL_ID}\")\n",
                "    print(\"   3. Name: Test Toolkit API\")\n",
                "    print(f\"   4. Dataset: {DATASET_EXTERNAL_ID}\")\n",
                "    print(\"   5. Copy code from:\")\n",
                "    print(f\"      main.py: {STREAMLIT_MAIN_URL}\")\n",
                "    print(f\"      requirements.txt: {STREAMLIT_REQS_URL}\")\n",
                "    print()\n",
                "    print(\"üí° This is OK - the Function is the key breakthrough!\")\n",
                "    # Don't raise - this is non-critical\n",
                "\n",
                "print()\n",
                "print(\"‚úÖ Streamlit deployment complete\")"
            ]
        },
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "## Cell 6: Deploy Streamlit via Function (Future)\n",
                "\n",
                "**Note**: This cell shows the future approach - deploying Streamlit by calling the Function to run `cdf deploy`. Currently commented out while Function API is being finalized."
            ]
        },
        {
            "cell_type": "code",
            "execution_count": None,
            "metadata": {},
            "outputs": [],
            "source": [
                "# FUTURE: Deploy Streamlit via Function running cdf deploy\n",
                "# This will be the complete end-to-end bootstrap solution\n",
                "\n",
                "print(\"üöß Step 3/3: Deploy Streamlit via Function (commented out)\")\n",
                "print()\n",
                "print(\"üí° Future approach:\")\n",
                "print(\"   1. Function downloads toolkit repo/module\")\n",
                "print(\"   2. Function runs 'cdf build'\")\n",
                "print(\"   3. Function runs 'cdf deploy' (deploys Streamlit)\")\n",
                "print(\"   4. Returns deployment results\")\n",
                "print()\n",
                "\n",
                "# Example call (when Function API is ready):\n",
                "\"\"\"\n",
                "call_result = client.functions.call(\n",
                "    external_id=FUNCTION_EXTERNAL_ID,\n",
                "    data={\n",
                "        \"action\": \"deploy\",\n",
                "        \"repo_url\": \"https://github.com/bgfast/cognite-quickstart\",\n",
                "        \"branch\": \"oct_mods\",\n",
                "        \"config_file\": \"config.test-toolkit-api.yaml\",\n",
                "        \"modules\": [\"test-toolkit-api\"],\n",
                "        \"dry_run\": False\n",
                "    }\n",
                ")\n",
                "\n",
                "print(f\"‚úÖ Function called: {call_result.id}\")\n",
                "print(\"   Check function logs for deployment status\")\n",
                "\"\"\"\n",
                "\n",
                "print(\"‚è© Skipping automated Streamlit deployment for now\")\n",
                "print(\"   (Function API being developed in parallel thread)\")\n",
                "print()\n",
                "\n",
                "# For now: Manual deployment instructions\n",
                "print(\"üìã Current workaround - Deploy Streamlit manually:\")\n",
                "print(\"   1. Go to CDF UI ‚Üí Apps ‚Üí Streamlit ‚Üí 'Create App'\")\n",
                "print(f\"   2. External ID: {STREAMLIT_EXTERNAL_ID}\")\n",
                "print(\"   3. Name: Test Toolkit API\")\n",
                "print(f\"   4. Dataset: {DATASET_EXTERNAL_ID}\")\n",
                "print(\"   5. Copy code from:\")\n",
                "print(f\"      main.py: {STREAMLIT_MAIN_URL}\")\n",
                "print(f\"      requirements.txt: {STREAMLIT_REQS_URL}\")\n",
                "print()\n",
                "print(\"‚úÖ Streamlit step complete (manual for now)\")"
            ]
        },
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": ["## Cell 7: Verify & Test"]
        },
        {
            "cell_type": "code",
            "execution_count": None,
            "metadata": {},
            "outputs": [],
            "source": [
                "print(\"=\"*60)\n",
                "print(\"üß™ Verification & Testing\")\n",
                "print(\"=\"*60)\n",
                "print()\n",
                "\n",
                "# Test function call\n",
                "print(\"üìû Calling function to verify it works...\")\n",
                "try:\n",
                "    call_result = client.functions.call(\n",
                "        external_id=FUNCTION_EXTERNAL_ID,\n",
                "        data={\"test\": \"bootstrap_verification\"}\n",
                "    )\n",
                "    print(f\"‚úÖ Function called successfully!\")\n",
                "    print(f\"   Call ID: {call_result.id}\")\n",
                "    print(f\"   Status: {call_result.status}\")\n",
                "    print()\n",
                "    print(\"üí° Function is executing... check CDF UI ‚Üí Functions for logs\")\n",
                "    print(\"   The function will:\")\n",
                "    print(\"   - Install cognite-toolkit\")\n",
                "    print(\"   - Fix PATH to include cdf commands\")\n",
                "    print(\"   - Test cdf build, deploy --dry-run, deploy\")\n",
                "    print(\"   - Return test results (~30 seconds)\")\n",
                "    \n",
                "except Exception as e:\n",
                "    print(f\"‚ö†Ô∏è  Function call failed: {e}\")\n",
                "    print(\"   Function is deployed but may need time to warm up\")\n",
                "    print(\"   Try calling again in 1-2 minutes\")\n",
                "\n",
                "print()\n",
                "print(\"=\"*60)\n",
                "print(\"üéâ DEPLOYMENT COMPLETE!\")\n",
                "print(\"=\"*60)\n",
                "print()\n",
                "print(\"üìã Deployed Resources:\")\n",
                "print(f\"   ‚Ä¢ Dataset: {DATASET_EXTERNAL_ID}\")\n",
                "print(f\"   ‚Ä¢ Function: {FUNCTION_EXTERNAL_ID}\")\n",
                "print(f\"   ‚Ä¢ Streamlit: {STREAMLIT_EXTERNAL_ID}\")\n",
                "print()\n",
                "print(\"üöÄ Next Steps:\")\n",
                "print(\"   1. Go to CDF UI ‚Üí Apps ‚Üí Streamlit\")\n",
                "print(\"   2. Find 'Test Toolkit API' app\")\n",
                "print(\"   3. Open the app\")\n",
                "print(\"   4. Click 'Call Function to Test Toolkit' button\")\n",
                "print(\"   5. Wait ~30 seconds for function to complete\")\n",
                "print(\"   6. See breakthrough confirmation with metrics! üéä\")\n",
                "print()\n",
                "print(\"üìö Learn More:\")\n",
                "print(\"   ‚Ä¢ GitHub: https://github.com/bgfast/cognite-quickstart\")\n",
                "print(\"   ‚Ä¢ Bootstrap README: ../bootstrap/README.md\")\n",
                "print(f\"   ‚Ä¢ Function Logs: CDF UI ‚Üí Integrate ‚Üí Functions ‚Üí {FUNCTION_EXTERNAL_ID}\")\n",
                "print(\"   ‚Ä¢ Documentation: ../cursor-prompts.md\")"
            ]
        }
    ],
    "metadata": {
        "kernelspec": {
            "display_name": "Python 3",
            "language": "python",
            "name": "python3"
        },
        "language_info": {
            "codemirror_mode": {
                "name": "ipython",
                "version": 3
            },
            "file_extension": ".py",
            "mimetype": "text/x-python",
            "name": "python",
            "nbconvert_exporter": "python",
            "pygments_lexer": "ipython3",
            "version": "3.11.0"
        }
    },
    "nbformat": 4,
    "nbformat_minor": 4
}

# Write the notebook
with open("toolkit_bootstrap.ipynb", "w", encoding="utf-8") as f:
    json.dump(notebook, f, indent=2)

print("‚úÖ Notebook generated: toolkit_bootstrap.ipynb")
print(f"   Cells: {len(notebook['cells'])}")
print("   Ready to use in Jupyter!")

